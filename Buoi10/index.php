<?php
class ConNguoi
{
    // Khai bai thuoc tinh <=> đặc điểm của nhóm đối tượng
    // property
    public $name;
    protected $age = 15;
    private $address = 'Cầu giấy,Hà Nội';

    // hàm khởi tạo - được gọi khi một đối tượng được khởi tạo
    public function __construct($name = '', $age = '')
    {
        $this->name = $name;
        $this->age = $age;
        echo 'hàm khởi tạo chạy'.'<br>';
    }

    // hàm hủy
    public function __destruct()
    {
        // TODO: Implement __destruct() method.
        echo 'hàm hủy được gọi'.'<br>';
    }

    // Phương thức <=> Hành độn của nhóm đối tượng đang thể hiện
    // method
    public function showName($name = '')
    {
        return 'hien thị tên '.$name;
    }

    public function showAgePublic()
    {
        $result = $this->showAge().' = '.$this->age;

        return $result;
    }

    protected function showAge($age = '')
    {
        return 'hien thi tuoi = '.$age;
    }

    public function showAddressPrivate()
    {
        $result = $this->showAddress().' = '.$this->address;

        return $result;
    }

    private function showAddress()
    {
        return 'hien thi dia chi';
    }
}

$objectA = new ConNguoi('T3HH', 31); // khởi tạo một đối tượng mới
echo $objectA->name.'<br>';
//echo $objectA->showName().'<br>';

// Không thể gọi đến  thuộc tính được khai báo là protected / private ngoài phạm vi lớp
// echo $objectA->address.'<br>';

// Không thể gọi đến phương thức được khai báo là protected / private ngoài phạm vi lớp
// $objectA->showAge();

// Có thể gọi tới thuộc tính / phương thức có phạm vị là protectd / privated thông qua hàm public
echo $objectA->showAgePublic().'<br>';
//echo $objectA->showAddressPrivate().'<br>';


class SinhVien extends ConNguoi
{
    public function __set($key, $value)
    {
        //kiểm tra xem trong class có tồn tại thuộc tính không
        if (property_exists($this, $key)) {
            //tiến hành gán giá trị
            $this->$key = $value;
        } else {
            die('Không tồn tại thuộc tính abcd');
        }
    }

    public function __get($key)
    {
        //kiểm tra xem trong class có tồn tại thuộc tính không
        if (property_exists($this, $key)) {
            //tiến hành lấy giá trị
            return $this->$key;
        } else {
            die('Không tồn tại thuộc tính xyz');
        }
    }

    public function showStudent()
    {
        return 'hien thi sinh vien';
    }

    // Có thể gọi tới thuộc tính / phương thức có phạm vị là protectd / privated từ lớp Cha thông qua hàm public
    public function showAgeStudent()
    {
        return $this->showAge();
    }

    public function showName($name = '')
    {
        parent::showName($name); // TODO: Change the autogenerated stub

        return 'hien thi ten tu lop con '. $name;
    }
}

$objectB = new SinhVien();
echo $objectB->showStudent().'<br>';
echo $objectB->showName('T3H').'<br>';
echo $objectB->showAgeStudent();
// echo $objectB->abcd = 'test';
echo $objectB->xyz;